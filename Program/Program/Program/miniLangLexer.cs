//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/facultate/anul_2/LFC/Program/Program/Program/miniLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class miniLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, FLOAT=2, DOUBLE=3, STRING=4, VOID=5, IF=6, ELSE=7, FOR=8, WHILE=9, 
		RETURN=10, ARITHMETIC_OPERATOR=11, RELATIONAL_OPERATOR=12, LOGICAL_OPERATOR=13, 
		ASSIGNMENT_OPERATOR=14, INCREMENT_OPERATOR=15, LPAREN=16, RPAREN=17, LBRACE=18, 
		RBRACE=19, COMMA=20, SEMICOLON=21, IDENTIFIER=22, NUMBER=23, STRING_LITERAL=24, 
		WS=25, COMMENT=26, MULTILINE_COMMENT=27;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INT", "FLOAT", "DOUBLE", "STRING", "VOID", "IF", "ELSE", "FOR", "WHILE", 
		"RETURN", "ARITHMETIC_OPERATOR", "RELATIONAL_OPERATOR", "LOGICAL_OPERATOR", 
		"ASSIGNMENT_OPERATOR", "INCREMENT_OPERATOR", "LPAREN", "RPAREN", "LBRACE", 
		"RBRACE", "COMMA", "SEMICOLON", "IDENTIFIER", "NUMBER", "STRING_LITERAL", 
		"WS", "COMMENT", "MULTILINE_COMMENT"
	};


	public miniLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public miniLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'float'", "'double'", "'string'", "'void'", "'if'", "'else'", 
		"'for'", "'while'", "'return'", null, null, null, null, null, "'('", "')'", 
		"'{'", "'}'", "','", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "FLOAT", "DOUBLE", "STRING", "VOID", "IF", "ELSE", "FOR", 
		"WHILE", "RETURN", "ARITHMETIC_OPERATOR", "RELATIONAL_OPERATOR", "LOGICAL_OPERATOR", 
		"ASSIGNMENT_OPERATOR", "INCREMENT_OPERATOR", "LPAREN", "RPAREN", "LBRACE", 
		"RBRACE", "COMMA", "SEMICOLON", "IDENTIFIER", "NUMBER", "STRING_LITERAL", 
		"WS", "COMMENT", "MULTILINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "miniLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static miniLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,27,221,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,
		1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,121,8,11,1,12,1,12,1,
		12,1,12,1,12,3,12,128,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,3,13,141,8,13,1,14,1,14,1,14,1,14,3,14,147,8,14,1,15,1,15,1,
		16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,5,21,163,8,21,
		10,21,12,21,166,9,21,1,22,4,22,169,8,22,11,22,12,22,170,1,22,1,22,4,22,
		175,8,22,11,22,12,22,176,3,22,179,8,22,1,23,1,23,5,23,183,8,23,10,23,12,
		23,186,9,23,1,23,1,23,1,24,4,24,191,8,24,11,24,12,24,192,1,24,1,24,1,25,
		1,25,1,25,1,25,5,25,201,8,25,10,25,12,25,204,9,25,1,25,1,25,1,26,1,26,
		1,26,1,26,5,26,212,8,26,10,26,12,26,215,9,26,1,26,1,26,1,26,1,26,1,26,
		1,213,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
		13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
		25,51,26,53,27,1,0,8,4,0,37,37,42,43,45,45,47,47,2,0,60,60,62,62,3,0,65,
		90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,34,34,92,92,
		3,0,9,10,13,13,32,32,2,0,10,10,13,13,240,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
		0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
		0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,59,1,0,0,0,5,65,1,0,0,
		0,7,72,1,0,0,0,9,79,1,0,0,0,11,84,1,0,0,0,13,87,1,0,0,0,15,92,1,0,0,0,
		17,96,1,0,0,0,19,102,1,0,0,0,21,109,1,0,0,0,23,120,1,0,0,0,25,127,1,0,
		0,0,27,140,1,0,0,0,29,146,1,0,0,0,31,148,1,0,0,0,33,150,1,0,0,0,35,152,
		1,0,0,0,37,154,1,0,0,0,39,156,1,0,0,0,41,158,1,0,0,0,43,160,1,0,0,0,45,
		168,1,0,0,0,47,180,1,0,0,0,49,190,1,0,0,0,51,196,1,0,0,0,53,207,1,0,0,
		0,55,56,5,105,0,0,56,57,5,110,0,0,57,58,5,116,0,0,58,2,1,0,0,0,59,60,5,
		102,0,0,60,61,5,108,0,0,61,62,5,111,0,0,62,63,5,97,0,0,63,64,5,116,0,0,
		64,4,1,0,0,0,65,66,5,100,0,0,66,67,5,111,0,0,67,68,5,117,0,0,68,69,5,98,
		0,0,69,70,5,108,0,0,70,71,5,101,0,0,71,6,1,0,0,0,72,73,5,115,0,0,73,74,
		5,116,0,0,74,75,5,114,0,0,75,76,5,105,0,0,76,77,5,110,0,0,77,78,5,103,
		0,0,78,8,1,0,0,0,79,80,5,118,0,0,80,81,5,111,0,0,81,82,5,105,0,0,82,83,
		5,100,0,0,83,10,1,0,0,0,84,85,5,105,0,0,85,86,5,102,0,0,86,12,1,0,0,0,
		87,88,5,101,0,0,88,89,5,108,0,0,89,90,5,115,0,0,90,91,5,101,0,0,91,14,
		1,0,0,0,92,93,5,102,0,0,93,94,5,111,0,0,94,95,5,114,0,0,95,16,1,0,0,0,
		96,97,5,119,0,0,97,98,5,104,0,0,98,99,5,105,0,0,99,100,5,108,0,0,100,101,
		5,101,0,0,101,18,1,0,0,0,102,103,5,114,0,0,103,104,5,101,0,0,104,105,5,
		116,0,0,105,106,5,117,0,0,106,107,5,114,0,0,107,108,5,110,0,0,108,20,1,
		0,0,0,109,110,7,0,0,0,110,22,1,0,0,0,111,121,7,1,0,0,112,113,5,60,0,0,
		113,121,5,61,0,0,114,115,5,62,0,0,115,121,5,61,0,0,116,117,5,61,0,0,117,
		121,5,61,0,0,118,119,5,33,0,0,119,121,5,61,0,0,120,111,1,0,0,0,120,112,
		1,0,0,0,120,114,1,0,0,0,120,116,1,0,0,0,120,118,1,0,0,0,121,24,1,0,0,0,
		122,123,5,38,0,0,123,128,5,38,0,0,124,125,5,124,0,0,125,128,5,124,0,0,
		126,128,5,33,0,0,127,122,1,0,0,0,127,124,1,0,0,0,127,126,1,0,0,0,128,26,
		1,0,0,0,129,141,5,61,0,0,130,131,5,43,0,0,131,141,5,61,0,0,132,133,5,45,
		0,0,133,141,5,61,0,0,134,135,5,42,0,0,135,141,5,61,0,0,136,137,5,47,0,
		0,137,141,5,61,0,0,138,139,5,37,0,0,139,141,5,61,0,0,140,129,1,0,0,0,140,
		130,1,0,0,0,140,132,1,0,0,0,140,134,1,0,0,0,140,136,1,0,0,0,140,138,1,
		0,0,0,141,28,1,0,0,0,142,143,5,43,0,0,143,147,5,43,0,0,144,145,5,45,0,
		0,145,147,5,45,0,0,146,142,1,0,0,0,146,144,1,0,0,0,147,30,1,0,0,0,148,
		149,5,40,0,0,149,32,1,0,0,0,150,151,5,41,0,0,151,34,1,0,0,0,152,153,5,
		123,0,0,153,36,1,0,0,0,154,155,5,125,0,0,155,38,1,0,0,0,156,157,5,44,0,
		0,157,40,1,0,0,0,158,159,5,59,0,0,159,42,1,0,0,0,160,164,7,2,0,0,161,163,
		7,3,0,0,162,161,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,
		0,165,44,1,0,0,0,166,164,1,0,0,0,167,169,7,4,0,0,168,167,1,0,0,0,169,170,
		1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,178,1,0,0,0,172,174,5,46,0,
		0,173,175,7,4,0,0,174,173,1,0,0,0,175,176,1,0,0,0,176,174,1,0,0,0,176,
		177,1,0,0,0,177,179,1,0,0,0,178,172,1,0,0,0,178,179,1,0,0,0,179,46,1,0,
		0,0,180,184,5,34,0,0,181,183,8,5,0,0,182,181,1,0,0,0,183,186,1,0,0,0,184,
		182,1,0,0,0,184,185,1,0,0,0,185,187,1,0,0,0,186,184,1,0,0,0,187,188,5,
		34,0,0,188,48,1,0,0,0,189,191,7,6,0,0,190,189,1,0,0,0,191,192,1,0,0,0,
		192,190,1,0,0,0,192,193,1,0,0,0,193,194,1,0,0,0,194,195,6,24,0,0,195,50,
		1,0,0,0,196,197,5,47,0,0,197,198,5,47,0,0,198,202,1,0,0,0,199,201,8,7,
		0,0,200,199,1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,
		205,1,0,0,0,204,202,1,0,0,0,205,206,6,25,0,0,206,52,1,0,0,0,207,208,5,
		47,0,0,208,209,5,42,0,0,209,213,1,0,0,0,210,212,9,0,0,0,211,210,1,0,0,
		0,212,215,1,0,0,0,213,214,1,0,0,0,213,211,1,0,0,0,214,216,1,0,0,0,215,
		213,1,0,0,0,216,217,5,42,0,0,217,218,5,47,0,0,218,219,1,0,0,0,219,220,
		6,26,0,0,220,54,1,0,0,0,13,0,120,127,140,146,164,170,176,178,184,192,202,
		213,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
