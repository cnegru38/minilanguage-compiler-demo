< INT, int, 1 >
< IDENTIFIER, adunare, 1 >
< LPAREN, (, 1 >
< INT, int, 1 >
< IDENTIFIER, first, 1 >
< COMMA, ,, 1 >
< INT, int, 1 >
< IDENTIFIER, second, 1 >
< RPAREN, ), 1 >
< LBRACE, {, 1 >
< RETURN, return, 2 >
< IDENTIFIER, first, 2 >
< ARITHMETIC_OPERATOR, +, 2 >
< IDENTIFIER, second, 2 >
< SEMICOLON, ;, 2 >
< IDENTIFIER, adunare, 3 >
< LPAREN, (, 3 >
< IDENTIFIER, first, 3 >
< COMMA, ,, 3 >
< IDENTIFIER, second, 3 >
< RPAREN, ), 3 >
< SEMICOLON, ;, 3 >
< RBRACE, }, 4 >
< INT, int, 6 >
< IDENTIFIER, scadere, 6 >
< LPAREN, (, 6 >
< INT, int, 6 >
< IDENTIFIER, first, 6 >
< COMMA, ,, 6 >
< INT, int, 6 >
< IDENTIFIER, second, 6 >
< RPAREN, ), 6 >
< LBRACE, {, 6 >
< IF, if, 7 >
< LPAREN, (, 7 >
< IDENTIFIER, second, 7 >
< RELATIONAL_OPERATOR, <, 7 >
< IDENTIFIER, first, 7 >
< RPAREN, ), 7 >
< LBRACE, {, 7 >
< RETURN, return, 8 >
< IDENTIFIER, first, 8 >
< ARITHMETIC_OPERATOR, -, 8 >
< IDENTIFIER, second, 8 >
< SEMICOLON, ;, 8 >
< RBRACE, }, 9 >
< ELSE, else, 10 >
< LBRACE, {, 10 >
< RETURN, return, 11 >
< IDENTIFIER, second, 11 >
< ARITHMETIC_OPERATOR, -, 11 >
< IDENTIFIER, first, 11 >
< SEMICOLON, ;, 11 >
< RBRACE, }, 12 >
< RBRACE, }, 13 >
< INT, int, 15 >
< IDENTIFIER, inmultire, 15 >
< LPAREN, (, 15 >
< INT, int, 15 >
< IDENTIFIER, first, 15 >
< COMMA, ,, 15 >
< INT, int, 15 >
< IDENTIFIER, second, 15 >
< RPAREN, ), 15 >
< LBRACE, {, 15 >
< RETURN, return, 16 >
< IDENTIFIER, first, 16 >
< ARITHMETIC_OPERATOR, *, 16 >
< IDENTIFIER, second, 16 >
< SEMICOLON, ;, 16 >
< RBRACE, }, 17 >
< DOUBLE, double, 19 >
< IDENTIFIER, varGlobala, 19 >
< ASSIGNMENT_OPERATOR, =, 19 >
< NUMBER, 5.43, 19 >
< SEMICOLON, ;, 19 >
< INT, int, 21 >
< IDENTIFIER, main, 21 >
< LPAREN, (, 21 >
< RPAREN, ), 21 >
< LBRACE, {, 21 >
< RBRACE, }, 21 >
< INT, int, 22 >
< IDENTIFIER, a, 22 >
< ASSIGNMENT_OPERATOR, =, 22 >
< NUMBER, 17, 22 >
< SEMICOLON, ;, 22 >
< INT, int, 23 >
< IDENTIFIER, b, 23 >
< ASSIGNMENT_OPERATOR, =, 23 >
< NUMBER, 45, 23 >
< SEMICOLON, ;, 23 >
< INT, int, 24 >
< IDENTIFIER, c, 24 >
< ASSIGNMENT_OPERATOR, =, 24 >
< NUMBER, 3, 24 >
< SEMICOLON, ;, 24 >
< FOR, for, 25 >
< LPAREN, (, 25 >
< INT, int, 25 >
< IDENTIFIER, i, 25 >
< ASSIGNMENT_OPERATOR, =, 25 >
< NUMBER, 0, 25 >
< SEMICOLON, ;, 25 >
< IDENTIFIER, i, 25 >
< RELATIONAL_OPERATOR, <, 25 >
< IDENTIFIER, c, 25 >
< SEMICOLON, ;, 25 >
< IDENTIFIER, i, 25 >
< INCREMENT_OPERATOR, ++, 25 >
< RPAREN, ), 25 >
< LBRACE, {, 25 >
< IDENTIFIER, a, 26 >
< ASSIGNMENT_OPERATOR, +=, 26 >
< IDENTIFIER, i, 26 >
< SEMICOLON, ;, 26 >
< RBRACE, }, 27 >
< STRING, string, 28 >
< IDENTIFIER, sirCaract, 28 >
< ASSIGNMENT_OPERATOR, =, 28 >
< STRING_LITERAL, "", 28 >
< SEMICOLON, ;, 28 >
< IF, if, 29 >
< LPAREN, (, 29 >
< IDENTIFIER, a, 29 >
< RELATIONAL_OPERATOR, >=, 29 >
< IDENTIFIER, b, 29 >
< LOGICAL_OPERATOR, &&, 29 >
< IDENTIFIER, varGlobala, 29 >
< RELATIONAL_OPERATOR, !=, 29 >
< NUMBER, 4.53, 29 >
< RPAREN, ), 29 >
< LBRACE, {, 29 >
< IDENTIFIER, myString, 30 >
< ASSIGNMENT_OPERATOR, =, 30 >
< STRING_LITERAL, "Ambele conditii sunt adevarate", 30 >
< SEMICOLON, ;, 30 >
< RBRACE, }, 31 >
< ELSE, else, 32 >
< LBRACE, {, 32 >
< IDENTIFIER, myString, 33 >
< ASSIGNMENT_OPERATOR, =, 33 >
< STRING_LITERAL, "Cel putin o conditie este falsa", 33 >
< SEMICOLON, ;, 33 >
< INT, int, 34 >
< IDENTIFIER, temp, 34 >
< ASSIGNMENT_OPERATOR, =, 34 >
< IDENTIFIER, a, 34 >
< ARITHMETIC_OPERATOR, +, 34 >
< NUMBER, 5, 34 >
< SEMICOLON, ;, 34 >
< RBRACE, }, 35 >
< IDENTIFIER, c, 36 >
< ASSIGNMENT_OPERATOR, =, 36 >
< IDENTIFIER, adunare, 36 >
< LPAREN, (, 36 >
< IDENTIFIER, a, 36 >
< COMMA, ,, 36 >
< IDENTIFIER, b, 36 >
< RPAREN, ), 36 >
< SEMICOLON, ;, 36 >
< INT, int, 37 >
< IDENTIFIER, s, 37 >
< ASSIGNMENT_OPERATOR, =, 37 >
< NUMBER, 0, 37 >
< SEMICOLON, ;, 37 >
< IDENTIFIER, s, 38 >
< ASSIGNMENT_OPERATOR, =, 38 >
< IDENTIFIER, scadere, 38 >
< LPAREN, (, 38 >
< IDENTIFIER, b, 38 >
< COMMA, ,, 38 >
< IDENTIFIER, c, 38 >
< RPAREN, ), 38 >
< SEMICOLON, ;, 38 >
< INT, int, 39 >
< IDENTIFIER, imn, 39 >
< ASSIGNMENT_OPERATOR, =, 39 >
< NUMBER, 0, 39 >
< SEMICOLON, ;, 39 >
< IDENTIFIER, inm, 40 >
< ASSIGNMENT_OPERATOR, =, 40 >
< IDENTIFIER, inmultire, 40 >
< LPAREN, (, 40 >
< IDENTIFIER, s, 40 >
< COMMA, ,, 40 >
< IDENTIFIER, a, 40 >
< RPAREN, ), 40 >
< SEMICOLON, ;, 40 >
< RETURN, return, 41 >
< NUMBER, 0, 41 >
< SEMICOLON, ;, 41 >
< RBRACE, }, 42 >
